# Cr√©√© par Viple SAS
import os
import sys
import subprocess
import winreg
import shutil

def check_python():
    """V√©rifie que Python est correctement install√© avec tkinter"""
    try:
        import tkinter
        print("‚úì Python et tkinter sont disponibles")
        return True
    except ImportError:
        print("‚úó Erreur: tkinter n'est pas disponible")
        print("Veuillez r√©installer Python en vous assurant que tkinter est inclus")
        return False

def install_dependencies():
    """Installe les d√©pendances Python n√©cessaires"""
    print("Installation des d√©pendances...")
    
    dependencies = [
        "Pillow>=8.0.0",
        "pystray>=0.19.0"
    ]
    
    for dep in dependencies:
        try:
            print(f"Installation de {dep}...")
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"‚úì {dep} install√© avec succ√®s")
        except subprocess.CalledProcessError as e:
            print(f"‚úó Erreur lors de l'installation de {dep}: {e}")
            return False
    
    return True

def create_viple_icons():
    """Cr√©e les ic√¥nes Viple personnalis√©es"""
    try:
        print("Cr√©ation des ic√¥nes Viple...")
        exec(open('create_viple_icon.py').read())
        print("‚úì Ic√¥nes Viple cr√©√©es")
        return True
    except Exception as e:
        print(f"‚úó Erreur lors de la cr√©ation des ic√¥nes: {e}")
        return False

def create_viplestart_directory():
    """Cr√©e le r√©pertoire C:\viplestart s'il n'existe pas"""
    viplestart_path = r"C:\viplestart"
    
    if not os.path.exists(viplestart_path):
        try:
            os.makedirs(viplestart_path)
            print(f"‚úì R√©pertoire {viplestart_path} cr√©√©")
            
            # Cr√©er des fichiers exemples
            example_files = ["lkiosk.exe", "lmanager.exe"]
            for file in example_files:
                example_path = os.path.join(viplestart_path, file)
                with open(example_path, 'w') as f:
                    f.write("# Fichier exemple - remplacez par le vrai ex√©cutable")
                print(f"‚úì Fichier exemple {file} cr√©√©")
                
        except PermissionError:
            print(f"‚úó Erreur: Permissions insuffisantes pour cr√©er {viplestart_path}")
            print("Veuillez ex√©cuter ce script en tant qu'administrateur")
            return False
        except Exception as e:
            print(f"‚úó Erreur lors de la cr√©ation de {viplestart_path}: {e}")
            return False
    else:
        print(f"‚úì R√©pertoire {viplestart_path} existe d√©j√†")
    
    return True

def install_startup():
    """Installe l'application de d√©marrage dans le registre Windows"""
    try:
        # Utiliser la version V3
        startup_files = ["startup_welcome_v3.py", "startup_welcome.py"]
        script_path = None
        
        for file in startup_files:
            if os.path.exists(file):
                script_path = os.path.abspath(file)
                break
        
        if not script_path:
            print("‚úó Erreur: Aucun fichier startup_welcome trouv√©")
            return False
        
        python_path = sys.executable
        
        # Commande √† ex√©cuter
        command = f'"{python_path}" "{script_path}"'
        
        # Ajouter au registre pour le d√©marrage automatique
        key = winreg.HKEY_CURRENT_USER
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
        
        with winreg.OpenKey(key, key_path, 0, winreg.KEY_SET_VALUE) as reg_key:
            winreg.SetValueEx(reg_key, "VipleWelcomeV3", 0, winreg.REG_SZ, command)
        
        print("‚úì Application V3 install√©e pour le d√©marrage automatique")
        return True
        
    except Exception as e:
        print(f"‚úó Erreur lors de l'installation du d√©marrage automatique: {e}")
        return False

def main():
    print("=== INSTALLATION VIPLE LAUNCHPAD V3 ===")
    print("Cr√©√© par Viple SAS")
    print("Version sans barre de titre - Interface √©pur√©e\n")
    
    # V√©rifier Python et tkinter
    if not check_python():
        return
    
    # Installer les d√©pendances
    if not install_dependencies():
        print("Erreur lors de l'installation des d√©pendances")
        return
    
    # Cr√©er les ic√¥nes Viple
    if not create_viple_icons():
        print("Attention: Les ic√¥nes n'ont pas pu √™tre cr√©√©es, mode de base utilis√©")
    
    # Cr√©er le r√©pertoire viplestart
    if not create_viplestart_directory():
        print("Erreur lors de la cr√©ation du r√©pertoire viplestart")
        return
    
    # Installer le d√©marrage automatique
    if install_startup():
        print("\nüéâ Installation V3 termin√©e avec succ√®s !")
        print("\nüÜï Nouvelles fonctionnalit√©s V3 :")
        print("   ‚Ä¢ Widget SANS barre de titre (interface √©pur√©e)")
        print("   ‚Ä¢ Bouton fermer personnalis√© (‚úï rouge)")
        print("   ‚Ä¢ D√©placement par glisser-d√©poser")
        print("   ‚Ä¢ Interface plus moderne et fluide")
        print("   ‚Ä¢ Bordure color√©e pour d√©limiter la fen√™tre")
        print("\nLes applications Viple V3 sont maintenant install√©es.")
        print("Au prochain red√©marrage, l'application se lancera automatiquement.")
        print("\nPour tester maintenant, ex√©cutez : python viple_launchpad_v3.py")
        print("\nüí° Astuce : Glissez le widget pour le d√©placer, cliquez ‚úï pour le fermer")
    else:
        print("\n‚úó Installation incompl√®te - v√©rifiez les erreurs ci-dessus")

def uninstall():
    """D√©sinstalle l'application de d√©marrage"""
    try:
        key = winreg.HKEY_CURRENT_USER
        key_path = r"Software\Microsoft\Windows\CurrentVersion\Run"
        
        # Supprimer toutes les versions
        with winreg.OpenKey(key, key_path, 0, winreg.KEY_SET_VALUE) as reg_key:
            versions = ["VipleWelcome", "VipleWelcomeV2", "VipleWelcomeV3"]
            
            for version in versions:
                try:
                    winreg.DeleteValue(reg_key, version)
                    print(f"‚úì {version} d√©sinstall√©e")
                except FileNotFoundError:
                    pass
        
    except Exception as e:
        print(f"‚úó Erreur lors de la d√©sinstallation: {e}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(description="Installation Viple LaunchPad V3")
    parser.add_argument("--uninstall", action="store_true", help="D√©sinstaller du d√©marrage")
    
    args = parser.parse_args()
    
    if args.uninstall:
        uninstall()
    else:
        main()